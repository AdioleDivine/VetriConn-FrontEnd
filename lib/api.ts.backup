const API_BASE_URL =
  process.env.NEXT_PUBLIC_API_URL ||
  process.env.NEXT_PUBLIC_API_URL_DEV ||
  "http://localhost:5000/api/v1";

// API Response types
export interface LoginResponse {
  success: boolean;
  message: string;
  data?: {
    user: {
      id: string;
      email: string;
      first_name?: string;
      last_name?: string;
      role?: string;
    };
    token: string;
  };
  error?: string;
}

export interface SignupResponse {
  success: boolean;
  message: string;
  data?: {
    user: {
      id: string;
      email: string;
      first_name: string;
      last_name: string;
      role: string;
    };
    token: string;
  };
  error?: string;
}

// Complete User Profile Interface (Backend)
export interface UserProfile {
  first_name: string;
  last_name: string;
  role: string;
  picture?: string;
  email: string;
  password: string;
  profession?: string;
  bio?: string;
  current_job?: string;
  experience?: string;
  location?: string;
  looking_for?: string[];
  socials?: {
    linkedin?: string;
    twitter?: string;
    github?: string;
  };
  professional_summary?: string;
  work_experience?: Array<{
    company: string;
    position: string;
    start_date?: string;
    end_date?: string;
    description?: string;
  }>;
  education?: Array<{
    institution: string;
    degree: string;
    field_of_study: string;
    start_year?: string;
    end_year?: string;
    description?: string;
    location?: string;
  }>;
  certifications?: Array<{
    name: string;
    issuing_organization: string;
    issue_date: string;
    expiration_date?: string;
    credential_id?: string;
    credential_url?: string;
  }>;
  saved_jobs?: string[];
  attachments?: string[];
}

// Login API call
export async function loginUser(
  email: string,
  password: string
): Promise<LoginResponse> {
  // Additional check for undefined API_BASE_URL
  if (!API_BASE_URL) {
    throw new Error(
      "API_BASE_URL is not defined. Please check your environment variables."
    );
  }

  try {
    const response = await fetch(`${API_BASE_URL}/auth/login`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        email,
        password,
      }),
    });

    // Check if the response is JSON
    const contentType = response.headers.get("content-type");
    if (!contentType || !contentType.includes("application/json")) {
      const textResponse = await response.text();
      throw new Error(
        `Server returned non-JSON response: ${response.status} ${response.statusText}`
      );
    }

    const data = await response.json();

    if (!response.ok) {
      throw new Error(
        data.message ||
          data.error ||
          `HTTP ${response.status}: ${response.statusText}`
      );
    }

    return data;
  } catch (error) {
    console.error("Login error:", error);

    // Handle network errors specifically
    if (error instanceof TypeError && error.message.includes("fetch")) {
      throw new Error(
        `Network error: Unable to connect to ${API_BASE_URL}. Please ensure the backend server is running.`
      );
    }

    throw error;
  }
}

// Signup API call
export async function signupUser(userData: {
  firstName: string;
  lastName: string;
  email: string;
  password: string;
  role?: string;
}): Promise<SignupResponse> {


  try {
    const requestBody: Record<string, string> = {
      first_name: userData.firstName,
      last_name: userData.lastName,
      email: userData.email,
      password: userData.password,
    };

    // Map frontend role values to backend format
    if (userData.role) {
      const roleMapping: Record<string, string> = {
        jobseeker: "job_seeker",
        employer: "employer",
      };
      requestBody.role = roleMapping[userData.role] || userData.role;
    }

    const response = await fetch(`${API_BASE_URL}/auth/register`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(requestBody),
    });

    const data = await response.json();

    if (!response.ok) {
      throw new Error(data.message || data.error || "Signup failed");
    }

    return data;
  } catch (error) {
    console.error("Signup error:", error);
    throw error;
  }
}

// Store authentication token
export function storeAuthToken(token: string) {
  if (typeof window !== "undefined") {
    localStorage.setItem("authToken", token);
  }
}

// Get authentication token
export function getAuthToken(): string | null {
  if (typeof window !== "undefined") {
    return localStorage.getItem("authToken");
  }
  return null;
}

// Remove authentication token
export function removeAuthToken() {
  if (typeof window !== "undefined") {
    localStorage.removeItem("authToken");
  }
}

// Check if user is authenticated
export function isAuthenticated(): boolean {
  return getAuthToken() !== null;
}

// Get user profile
export async function getUserProfile(): Promise<Record<string, unknown>> {
  const token = getAuthToken();

  if (!token) {
    throw new Error("No authentication token found");
  }

  try {
    const response = await fetch(`${API_BASE_URL}/auth/profile`, {
      method: "GET",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${token}`,
      },
    });

    const data = await response.json();

    if (!response.ok) {
      throw new Error(data.message || data.error || "Failed to fetch profile");
    }

    return data;
  } catch (error) {
    console.error("Profile fetch error:", error);
    throw error;
  }
}

// Update user profile
export async function updateUserProfile(profileData: Record<string, unknown>): Promise<Record<string, unknown>> {
  const token = getAuthToken();

  if (!token) {
    throw new Error("No authentication token found");
  }

  console.log(
    "Making profile update request to:",
    `${API_BASE_URL}/auth/profile`
  );
  console.log("Profile data:", profileData);

  try {
    const response = await fetch(`${API_BASE_URL}/auth/profile`, {
      method: "PATCH",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${token}`,
      },
      body: JSON.stringify(profileData),
    });

    console.log("Profile update response status:", response.status);

    const data = await response.json();
    console.log("Profile update response data:", data);

    if (!response.ok) {
      throw new Error(data.message || data.error || "Failed to update profile");
    }

    return data;
  } catch (error) {
    console.error("Profile update error:", error);

    // Handle network errors specifically
    if (error instanceof TypeError && error.message.includes("fetch")) {
      throw new Error(
        `Network error: Unable to connect to server. Please ensure the backend server is running.`
      );
    }

    throw error;
  }
}

// Jobs API Response types - Direct array response from backend
export interface JobsResponse {
  _id: string;
  id: string;
  role: string;
  company_name: string;
  company_logo?: string;
  location?: string;
  salary: {
    symbol: string;
    number: number;
    currency: string;
  };
  salary_range?: {
    start_salary: {
      symbol: string;
      number?: number;
      currency: string;
    };
    end_salary: {
      symbol: string;
      number?: number;
      currency: string;
    };
  };
  tags?: string[];
  full_description?: string;
  responsibilities?: string[];
  qualifications?: string[];
  applicationLink?: string;
  description?: string;
  createdAt: string;
  updatedAt: string;
}

// Fetch jobs from database
export async function getJobs(options?: {
  page?: number;
  limit?: number;
  location?: string;
  search?: string;
}): Promise<JobsResponse[]> {
  const { page = 1, limit = 10, location, search } = options || {};

  // Build query parameters
  const queryParams = new URLSearchParams({
    page: page.toString(),
    limit: limit.toString(),
  });

  if (location) {
    queryParams.append("location", location);
  }

  if (search) {
    queryParams.append("search", search);
  }

  console.log("Making jobs request to:", `${API_BASE_URL}/jobs?${queryParams}`);

  try {
    const response = await fetch(`${API_BASE_URL}/jobs?${queryParams}`, {
      method: "GET",
      headers: {
        "Content-Type": "application/json",
      },
    });

    console.log("Jobs response status:", response.status);

    // Check if the response is JSON
    const contentType = response.headers.get("content-type");
    if (!contentType || !contentType.includes("application/json")) {
      const textResponse = await response.text();
      console.log("Non-JSON response:", textResponse);
      throw new Error(
        `Server returned non-JSON response: ${response.status} ${response.statusText}`
      );
    }

    const data = await response.json();
    console.log("Jobs response data:", data);

    if (!response.ok) {
      throw new Error(`HTTP ${response.status}: ${response.statusText}`);
    }

    // Backend returns array directly, not wrapped in success/data structure
    return data;
  } catch (error) {
    console.error("Jobs fetch error:", error);

    // Handle network errors specifically
    if (error instanceof TypeError && error.message.includes("fetch")) {
      throw new Error(
        `Network error: Unable to connect to ${API_BASE_URL}. Please ensure the backend server is running.`
      );
    }

    throw error;
  }
}

// Fetch single job by ID
export async function getJobById(jobId: string): Promise<JobsResponse> {
  console.log("Making single job request to:", `${API_BASE_URL}/jobs/${jobId}`);

  try {
    const response = await fetch(`${API_BASE_URL}/jobs/${jobId}`, {
      method: "GET",
      headers: {
        "Content-Type": "application/json",
      },
    });

    console.log("Single job response status:", response.status);

    // Check if the response is JSON
    const contentType = response.headers.get("content-type");
    if (!contentType || !contentType.includes("application/json")) {
      const textResponse = await response.text();
      console.log("Non-JSON response:", textResponse);
      throw new Error(
        `Server returned non-JSON response: ${response.status} ${response.statusText}`
      );
    }

    const data = await response.json();
    console.log("Single job response data:", data);

    if (!response.ok) {
      throw new Error(`HTTP ${response.status}: ${response.statusText}`);
    }

    // Backend returns job object directly
    return data;
  } catch (error) {
    console.error("Single job fetch error:", error);

    // Handle network errors specifically
    if (error instanceof TypeError && error.message.includes("fetch")) {
      throw new Error(
        `Network error: Unable to connect to ${API_BASE_URL}. Please ensure the backend server is running.`
      );
    }

    throw error;
  }
}
